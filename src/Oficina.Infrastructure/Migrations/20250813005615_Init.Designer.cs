// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oficina.Infrastructure.DataAccess;

#nullable disable

namespace Oficina.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250813005615_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContaUsuario", b =>
                {
                    b.Property<int>("ContasId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("ContasId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("ContaUsuario");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.ClienteAggregates.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contatos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enderecos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("SexoId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Atualizado", "Oficina.Domain.Aggregates.ClienteAggregates.Cliente.Atualizado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Atualizado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Criado", "Oficina.Domain.Aggregates.ClienteAggregates.Cliente.Criado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Criado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DataNascimento", "Oficina.Domain.Aggregates.ClienteAggregates.Cliente.DataNascimento#DataNascimento", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Valor");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Documento", "Oficina.Domain.Aggregates.ClienteAggregates.Cliente.Documento#Documento", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("Numero");

                            b1.ComplexProperty<Dictionary<string, object>>("TipoDocumento", "Oficina.Domain.Aggregates.ClienteAggregates.Cliente.Documento#Documento.TipoDocumento#TipoDocumento", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Dominio")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("Id");

                                    b2.Property<string>("Key")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Nome")
                                        .IsRequired()
                                        .HasMaxLength(600)
                                        .HasColumnType("nvarchar(600)")
                                        .HasColumnName("Nome");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Oficina.Domain.Aggregates.ClienteAggregates.Cliente.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Principal")
                                .HasColumnType("bit");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(800)
                                .HasColumnType("nvarchar(800)")
                                .HasColumnName("Principal");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.ToTable("Cliente", t =>
                        {
                            t.Property("Id")
                                .HasColumnName("Cliente_Id");

                            t.Property("Nome")
                                .HasColumnName("Cliente_Nome");
                        });
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.ContaAggregates.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Atualizado", "Oficina.Domain.Aggregates.ContaAggregates.Conta.Atualizado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Atualizado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Criado", "Oficina.Domain.Aggregates.ContaAggregates.Conta.Criado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Criado");
                        });

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Conta");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.LojaAggregates.Loja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContaId")
                        .HasColumnType("int");

                    b.Property<string>("Contatos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("LogoTipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Atualizado", "Oficina.Domain.Aggregates.LojaAggregates.Loja.Atualizado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Atualizado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Criado", "Oficina.Domain.Aggregates.LojaAggregates.Loja.Criado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Criado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Documento", "Oficina.Domain.Aggregates.LojaAggregates.Loja.Documento#Documento", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("Numero");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ContaId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Loja");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.LojaAggregates.UsuarioLoja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LojaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LojaId");

                    b.ToTable("UsuarioLoja");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contatos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("SexoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoClass")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TipoUsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsuarioPadrao")
                        .HasColumnType("bit");

                    b.ComplexProperty<Dictionary<string, object>>("Atualizado", "Oficina.Domain.Aggregates.UsuarioAggregates.Usuario.Atualizado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Atualizado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Criado", "Oficina.Domain.Aggregates.UsuarioAggregates.Usuario.Criado#DataHora", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Criado");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DataNascimento", "Oficina.Domain.Aggregates.UsuarioAggregates.Usuario.DataNascimento#DataNascimento", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2")
                                .HasColumnName("Valor");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Documento", "Oficina.Domain.Aggregates.UsuarioAggregates.Usuario.Documento#Documento", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("Numero");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("Usuario");

                    b.HasDiscriminator<string>("TipoClass").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Oficina.Domain.Enumerations.DadoDominio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dominio")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Dominio")
                        .IsUnique();

                    b.ToTable("DadoDominio");

                    b.HasDiscriminator<string>("Dominio").HasValue("DadoDominio");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.Funcionario", b =>
                {
                    b.HasBaseType("Oficina.Domain.Aggregates.UsuarioAggregates.Usuario");

                    b.HasDiscriminator().HasValue("Funcionario");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.SuperAdmin", b =>
                {
                    b.HasBaseType("Oficina.Domain.Aggregates.UsuarioAggregates.Usuario");

                    b.HasDiscriminator().HasValue("SuperAdmin");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.ContaAggregates.ContaStatus", b =>
                {
                    b.HasBaseType("Oficina.Domain.Enumerations.DadoDominio");

                    b.HasDiscriminator().HasValue("ContaStatus");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.Sexo", b =>
                {
                    b.HasBaseType("Oficina.Domain.Enumerations.DadoDominio");

                    b.HasDiscriminator().HasValue("Sexo");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.TipoDocumento", b =>
                {
                    b.HasBaseType("Oficina.Domain.Enumerations.DadoDominio");

                    b.HasDiscriminator().HasValue("TipoDocumento");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.TipoUsuario", b =>
                {
                    b.HasBaseType("Oficina.Domain.Enumerations.DadoDominio");

                    b.HasDiscriminator().HasValue("TipoUsuario");
                });

            modelBuilder.Entity("ContaUsuario", b =>
                {
                    b.HasOne("Oficina.Domain.Aggregates.ContaAggregates.Conta", null)
                        .WithMany()
                        .HasForeignKey("ContasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oficina.Domain.Aggregates.UsuarioAggregates.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.ClienteAggregates.Cliente", b =>
                {
                    b.HasOne("Oficina.Domain.Aggregates.UsuarioAggregates.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.ContaAggregates.Conta", b =>
                {
                    b.HasOne("Oficina.Domain.Aggregates.ContaAggregates.ContaStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.LojaAggregates.Loja", b =>
                {
                    b.HasOne("Oficina.Domain.Aggregates.ContaAggregates.Conta", "Conta")
                        .WithMany("Lojas")
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oficina.Domain.Aggregates.UsuarioAggregates.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.LojaAggregates.UsuarioLoja", b =>
                {
                    b.HasOne("Oficina.Domain.Aggregates.LojaAggregates.Loja", null)
                        .WithMany("UsuariosLoja")
                        .HasForeignKey("LojaId");

                    b.OwnsOne("Oficina.Domain.ValueObjects.DataHora", "Atualizado", b1 =>
                        {
                            b1.Property<int>("UsuarioLojaId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2");

                            b1.HasKey("UsuarioLojaId");

                            b1.ToTable("UsuarioLoja");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioLojaId");
                        });

                    b.OwnsOne("Oficina.Domain.ValueObjects.DataHora", "Criado", b1 =>
                        {
                            b1.Property<int>("UsuarioLojaId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Valor")
                                .HasColumnType("datetime2");

                            b1.HasKey("UsuarioLojaId");

                            b1.ToTable("UsuarioLoja");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioLojaId");
                        });

                    b.Navigation("Atualizado")
                        .IsRequired();

                    b.Navigation("Criado")
                        .IsRequired();
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.UsuarioAggregates.Usuario", b =>
                {
                    b.HasOne("Oficina.Domain.Aggregates.UsuarioAggregates.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oficina.Domain.Aggregates.UsuarioAggregates.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oficina.Domain.Aggregates.UsuarioAggregates.TipoUsuario", "TipoUsuario")
                        .WithMany()
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sexo");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.ContaAggregates.Conta", b =>
                {
                    b.Navigation("Lojas");
                });

            modelBuilder.Entity("Oficina.Domain.Aggregates.LojaAggregates.Loja", b =>
                {
                    b.Navigation("UsuariosLoja");
                });
#pragma warning restore 612, 618
        }
    }
}
